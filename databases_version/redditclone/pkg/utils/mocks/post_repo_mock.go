// Code generated by MockGen. DO NOT EDIT.
// Source: redditclone/pkg/post (interfaces: PostRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	post "redditclone/pkg/post"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPostRepo is a mock of PostRepo interface.
type MockPostRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPostRepoMockRecorder
}

// MockPostRepoMockRecorder is the mock recorder for MockPostRepo.
type MockPostRepoMockRecorder struct {
	mock *MockPostRepo
}

// NewMockPostRepo creates a new mock instance.
func NewMockPostRepo(ctrl *gomock.Controller) *MockPostRepo {
	mock := &MockPostRepo{ctrl: ctrl}
	mock.recorder = &MockPostRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostRepo) EXPECT() *MockPostRepoMockRecorder {
	return m.recorder
}

// AddComment mocks base method.
func (m *MockPostRepo) AddComment(arg0, arg1, arg2, arg3 string) (*post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddComment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddComment indicates an expected call of AddComment.
func (mr *MockPostRepoMockRecorder) AddComment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockPostRepo)(nil).AddComment), arg0, arg1, arg2, arg3)
}

// CreatePost mocks base method.
func (m *MockPostRepo) CreatePost(arg0 post.NewPostRequest, arg1, arg2 string) *post.Post {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", arg0, arg1, arg2)
	ret0, _ := ret[0].(*post.Post)
	return ret0
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPostRepoMockRecorder) CreatePost(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostRepo)(nil).CreatePost), arg0, arg1, arg2)
}

// DeleteComment mocks base method.
func (m *MockPostRepo) DeleteComment(arg0, arg1, arg2 string) (*post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", arg0, arg1, arg2)
	ret0, _ := ret[0].(*post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockPostRepoMockRecorder) DeleteComment(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockPostRepo)(nil).DeleteComment), arg0, arg1, arg2)
}

// DeletePost mocks base method.
func (m *MockPostRepo) DeletePost(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockPostRepoMockRecorder) DeletePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPostRepo)(nil).DeletePost), arg0, arg1)
}

// GetPost mocks base method.
func (m *MockPostRepo) GetPost(arg0 string) (post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", arg0)
	ret0, _ := ret[0].(post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockPostRepoMockRecorder) GetPost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockPostRepo)(nil).GetPost), arg0)
}

// GetPosts mocks base method.
func (m *MockPostRepo) GetPosts() []*post.Post {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosts")
	ret0, _ := ret[0].([]*post.Post)
	return ret0
}

// GetPosts indicates an expected call of GetPosts.
func (mr *MockPostRepoMockRecorder) GetPosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosts", reflect.TypeOf((*MockPostRepo)(nil).GetPosts))
}

// GetPostsByCategory mocks base method.
func (m *MockPostRepo) GetPostsByCategory(arg0 string) []post.Post {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsByCategory", arg0)
	ret0, _ := ret[0].([]post.Post)
	return ret0
}

// GetPostsByCategory indicates an expected call of GetPostsByCategory.
func (mr *MockPostRepoMockRecorder) GetPostsByCategory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByCategory", reflect.TypeOf((*MockPostRepo)(nil).GetPostsByCategory), arg0)
}

// PostsByUser mocks base method.
func (m *MockPostRepo) PostsByUser(arg0 string) []post.Post {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostsByUser", arg0)
	ret0, _ := ret[0].([]post.Post)
	return ret0
}

// PostsByUser indicates an expected call of PostsByUser.
func (mr *MockPostRepoMockRecorder) PostsByUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostsByUser", reflect.TypeOf((*MockPostRepo)(nil).PostsByUser), arg0)
}

// VotePost mocks base method.
func (m *MockPostRepo) VotePost(arg0, arg1 string, arg2 int) (*post.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VotePost", arg0, arg1, arg2)
	ret0, _ := ret[0].(*post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VotePost indicates an expected call of VotePost.
func (mr *MockPostRepoMockRecorder) VotePost(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VotePost", reflect.TypeOf((*MockPostRepo)(nil).VotePost), arg0, arg1, arg2)
}
